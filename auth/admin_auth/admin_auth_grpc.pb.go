// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: admin_auth.proto

package admin_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminAuthService_AdminAuth_FullMethodName          = "/auth.AdminAuthService/AdminAuth"
	AdminAuthService_AdminSignUp_FullMethodName        = "/auth.AdminAuthService/AdminSignUp"
	AdminAuthService_BanUser_FullMethodName            = "/auth.AdminAuthService/BanUser"
	AdminAuthService_CreateInviteToken_FullMethodName  = "/auth.AdminAuthService/CreateInviteToken"
	AdminAuthService_GetListOfUsers_FullMethodName     = "/auth.AdminAuthService/GetListOfUsers"
	AdminAuthService_GetClientIDByLogin_FullMethodName = "/auth.AdminAuthService/GetClientIDByLogin"
)

// AdminAuthServiceClient is the client API for AdminAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAuthServiceClient interface {
	AdminAuth(ctx context.Context, in *AdminAuthRequest, opts ...grpc.CallOption) (*AdminAuthResponse, error)
	AdminSignUp(ctx context.Context, in *AdminSignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*CreateInviteTokenResponse, error)
	GetListOfUsers(ctx context.Context, in *GetListOfUsersRequest, opts ...grpc.CallOption) (*GetListOfUsersResponse, error)
	GetClientIDByLogin(ctx context.Context, in *GetClientIDByLoginRequest, opts ...grpc.CallOption) (*GetClientIDByLoginResponse, error)
}

type adminAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAuthServiceClient(cc grpc.ClientConnInterface) AdminAuthServiceClient {
	return &adminAuthServiceClient{cc}
}

func (c *adminAuthServiceClient) AdminAuth(ctx context.Context, in *AdminAuthRequest, opts ...grpc.CallOption) (*AdminAuthResponse, error) {
	out := new(AdminAuthResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_AdminAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) AdminSignUp(ctx context.Context, in *AdminSignUpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_AdminSignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminAuthService_BanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*CreateInviteTokenResponse, error) {
	out := new(CreateInviteTokenResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_CreateInviteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) GetListOfUsers(ctx context.Context, in *GetListOfUsersRequest, opts ...grpc.CallOption) (*GetListOfUsersResponse, error) {
	out := new(GetListOfUsersResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_GetListOfUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminAuthServiceClient) GetClientIDByLogin(ctx context.Context, in *GetClientIDByLoginRequest, opts ...grpc.CallOption) (*GetClientIDByLoginResponse, error) {
	out := new(GetClientIDByLoginResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_GetClientIDByLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAuthServiceServer is the server API for AdminAuthService service.
// All implementations must embed UnimplementedAdminAuthServiceServer
// for forward compatibility
type AdminAuthServiceServer interface {
	AdminAuth(context.Context, *AdminAuthRequest) (*AdminAuthResponse, error)
	AdminSignUp(context.Context, *AdminSignUpRequest) (*emptypb.Empty, error)
	BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error)
	CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*CreateInviteTokenResponse, error)
	GetListOfUsers(context.Context, *GetListOfUsersRequest) (*GetListOfUsersResponse, error)
	GetClientIDByLogin(context.Context, *GetClientIDByLoginRequest) (*GetClientIDByLoginResponse, error)
	mustEmbedUnimplementedAdminAuthServiceServer()
}

// UnimplementedAdminAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAuthServiceServer struct {
}

func (UnimplementedAdminAuthServiceServer) AdminAuth(context.Context, *AdminAuthRequest) (*AdminAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuth not implemented")
}
func (UnimplementedAdminAuthServiceServer) AdminSignUp(context.Context, *AdminSignUpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSignUp not implemented")
}
func (UnimplementedAdminAuthServiceServer) BanUser(context.Context, *BanUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedAdminAuthServiceServer) CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*CreateInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteToken not implemented")
}
func (UnimplementedAdminAuthServiceServer) GetListOfUsers(context.Context, *GetListOfUsersRequest) (*GetListOfUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfUsers not implemented")
}
func (UnimplementedAdminAuthServiceServer) GetClientIDByLogin(context.Context, *GetClientIDByLoginRequest) (*GetClientIDByLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientIDByLogin not implemented")
}
func (UnimplementedAdminAuthServiceServer) mustEmbedUnimplementedAdminAuthServiceServer() {}

// UnsafeAdminAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAuthServiceServer will
// result in compilation errors.
type UnsafeAdminAuthServiceServer interface {
	mustEmbedUnimplementedAdminAuthServiceServer()
}

func RegisterAdminAuthServiceServer(s grpc.ServiceRegistrar, srv AdminAuthServiceServer) {
	s.RegisterService(&AdminAuthService_ServiceDesc, srv)
}

func _AdminAuthService_AdminAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).AdminAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_AdminAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).AdminAuth(ctx, req.(*AdminAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_AdminSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).AdminSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_AdminSignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).AdminSignUp(ctx, req.(*AdminSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_CreateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).CreateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_CreateInviteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).CreateInviteToken(ctx, req.(*CreateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_GetListOfUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOfUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).GetListOfUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_GetListOfUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).GetListOfUsers(ctx, req.(*GetListOfUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminAuthService_GetClientIDByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientIDByLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).GetClientIDByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_GetClientIDByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).GetClientIDByLogin(ctx, req.(*GetClientIDByLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAuthService_ServiceDesc is the grpc.ServiceDesc for AdminAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AdminAuthService",
	HandlerType: (*AdminAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminAuth",
			Handler:    _AdminAuthService_AdminAuth_Handler,
		},
		{
			MethodName: "AdminSignUp",
			Handler:    _AdminAuthService_AdminSignUp_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _AdminAuthService_BanUser_Handler,
		},
		{
			MethodName: "CreateInviteToken",
			Handler:    _AdminAuthService_CreateInviteToken_Handler,
		},
		{
			MethodName: "GetListOfUsers",
			Handler:    _AdminAuthService_GetListOfUsers_Handler,
		},
		{
			MethodName: "GetClientIDByLogin",
			Handler:    _AdminAuthService_GetClientIDByLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_auth.proto",
}
